
AMIT_Kit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000230  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000230  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000960  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000674  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000442  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b6  00000000  00000000  00001c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  7a:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	88 60       	ori	r24, 0x08	; 8
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_lcd_kick+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_lcd_kick+0x10>
  92:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <LCD_check_lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	8d 7f       	andi	r24, 0xFD	; 253
  ac:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
  ae:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
  b2:	8a b3       	in	r24, 0x1a	; 26
  b4:	80 6f       	ori	r24, 0xF0	; 240
  b6:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	8b 7f       	andi	r24, 0xFB	; 251
  bc:	88 bb       	out	0x18, r24	; 24
  be:	08 95       	ret

000000c0 <LCD_WRITE_COMMAND>:
	
}


void LCD_WRITE_COMMAND(unsigned char command){
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
	LCD_check_lcd_isbusy();
  c4:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_check_lcd_isbusy>
	LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	9c 2f       	mov	r25, r28
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	89 2b       	or	r24, r25
  d2:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	89 7f       	andi	r24, 0xF9	; 249
  d8:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick ();
  da:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
  de:	2b b3       	in	r18, 0x1b	; 27
  e0:	30 e1       	ldi	r19, 0x10	; 16
  e2:	c3 9f       	mul	r28, r19
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	92 2f       	mov	r25, r18
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	89 2b       	or	r24, r25
  ee:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	89 7f       	andi	r24, 0xF9	; 249
  f4:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
  f6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	#endif
}
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <LCD_clear_screen>:
 *  Author: Ziad El-Sayed
 */ 
#include "LCD.h"

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 104:	08 95       	ret

00000106 <LCD_GOTO_XY>:
	LCD_CTRL |= (1 << EN_SWITCH);
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	c8 2f       	mov	r28, r24
 10c:	d6 2f       	mov	r29, r22
	if (line == 1)
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	31 f4       	brne	.+12     	; 0x11e <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 112:	60 31       	cpi	r22, 0x10	; 16
 114:	20 f4       	brcc	.+8      	; 0x11e <LCD_GOTO_XY+0x18>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 116:	80 e8       	ldi	r24, 0x80	; 128
 118:	86 0f       	add	r24, r22
 11a:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 11e:	c2 30       	cpi	r28, 0x02	; 2
 120:	31 f4       	brne	.+12     	; 0x12e <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 122:	d0 31       	cpi	r29, 0x10	; 16
 124:	20 f4       	brcc	.+8      	; 0x12e <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 126:	80 ec       	ldi	r24, 0xC0	; 192
 128:	8d 0f       	add	r24, r29
 12a:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
		}
	}
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <LCD_INIT>:
 134:	87 e8       	ldi	r24, 0x87	; 135
 136:	93 e1       	ldi	r25, 0x13	; 19
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_INIT+0x4>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_INIT+0xa>
 13e:	00 00       	nop

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 140:	87 b3       	in	r24, 0x17	; 23
 142:	8e 60       	ori	r24, 0x0E	; 14
 144:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 146:	88 b3       	in	r24, 0x18	; 24
 148:	81 7f       	andi	r24, 0xF1	; 241
 14a:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	8a bb       	out	0x1a, r24	; 26
 150:	85 ea       	ldi	r24, 0xA5	; 165
 152:	9e e0       	ldi	r25, 0x0E	; 14
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_INIT+0x20>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_INIT+0x26>
 15a:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 15c:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_clear_screen>
	#ifdef FOUR_BIT_MODE
	//LCD_WRITE_COMMAND(0x02);		/* send for 4 bit initialization of LCD  */
	//LCD_WRITE_COMMAND(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
	//LCD_WRITE_COMMAND(0x0c);              /* Display on cursor off*/
	//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
	LCD_WRITE_COMMAND(0x01);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x02);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 17e:	8f e0       	ldi	r24, 0x0F	; 15
 180:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 184:	08 95       	ret

00000186 <LCD_WRITE_CHAR>:
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 186:	cf 93       	push	r28
 188:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
	//LCD_check_lcd_isbusy();
	LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 18a:	8b b3       	in	r24, 0x1b	; 27
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	9c 2f       	mov	r25, r28
 190:	90 7f       	andi	r25, 0xF0	; 240
 192:	89 2b       	or	r24, r25
 194:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 196:	88 b3       	in	r24, 0x18	; 24
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	8b 7f       	andi	r24, 0xFB	; 251
 1a0:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 1a2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	30 e1       	ldi	r19, 0x10	; 16
 1aa:	c3 9f       	mul	r28, r19
 1ac:	c0 01       	movw	r24, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	92 2f       	mov	r25, r18
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	89 2b       	or	r24, r25
 1b6:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 1b8:	88 b3       	in	r24, 0x18	; 24
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 1be:	88 b3       	in	r24, 0x18	; 24
 1c0:	8b 7f       	andi	r24, 0xFB	; 251
 1c2:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick ();
 1c4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	#endif
}
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	8c 01       	movw	r16, r24
	int count = 0;
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 1da:	18 c0       	rjmp	.+48     	; 0x20c <LCD_WRITE_STRING+0x40>
		count++;
 1dc:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 1de:	0f 5f       	subi	r16, 0xFF	; 255
 1e0:	1f 4f       	sbci	r17, 0xFF	; 255
 1e2:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_WRITE_CHAR>
		if (count == 16)
 1e6:	c0 31       	cpi	r28, 0x10	; 16
 1e8:	d1 05       	cpc	r29, r1
 1ea:	29 f4       	brne	.+10     	; 0x1f6 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(2,0);
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GOTO_XY>
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <LCD_WRITE_STRING+0x40>
		}
		else if (count == 32)
 1f6:	c0 32       	cpi	r28, 0x20	; 32
 1f8:	d1 05       	cpc	r29, r1
 1fa:	41 f4       	brne	.+16     	; 0x20c <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
 1fc:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GOTO_XY>
			count = 0;
 208:	c0 e0       	ldi	r28, 0x00	; 0
 20a:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 20c:	f8 01       	movw	r30, r16
 20e:	80 81       	ld	r24, Z
 210:	81 11       	cpse	r24, r1
 212:	e4 cf       	rjmp	.-56     	; 0x1dc <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	08 95       	ret

0000021e <main>:


int main(void)
{
    /* Replace with your application code */
	LCD_INIT();
 21e:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_INIT>
	LCD_WRITE_STRING("Learn-in-depth");
 222:	80 e6       	ldi	r24, 0x60	; 96
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WRITE_STRING>
 22a:	ff cf       	rjmp	.-2      	; 0x22a <main+0xc>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
