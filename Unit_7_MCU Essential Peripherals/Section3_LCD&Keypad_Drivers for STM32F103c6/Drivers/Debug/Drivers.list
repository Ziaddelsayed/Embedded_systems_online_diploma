
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ad4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08000c04  08000c04  00010c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c3c  08000c3c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000c3c  08000c3c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c3c  08000c3c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c3c  08000c3c  00010c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c40  08000c40  00010c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000c64  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000c64  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003088  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007ee  00000000  00000000  000230d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000074c  00000000  00000000  000238bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000150  00000000  00000000  00024010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00024160  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001f84  00000000  00000000  00024268  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001a2f  00000000  00000000  000261ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007a5e  00000000  00000000  00027c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f679  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003e4  00000000  00000000  0002f6f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bec 	.word	0x08000bec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000bec 	.word	0x08000bec

08000170 <Keypad_Init>:
int Key_padRow[] = { R0, R1, R2, R3 }; //rows of the keypad
int Key_padCol[] = { C0, C1, C2, C3 }; //columns


void Keypad_Init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	PinCfg.GPIO_pinNumber = R0 ;
 8000174:	4b37      	ldr	r3, [pc, #220]	; (8000254 <Keypad_Init+0xe4>)
 8000176:	2201      	movs	r2, #1
 8000178:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800017a:	4b36      	ldr	r3, [pc, #216]	; (8000254 <Keypad_Init+0xe4>)
 800017c:	2204      	movs	r2, #4
 800017e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000180:	4b34      	ldr	r3, [pc, #208]	; (8000254 <Keypad_Init+0xe4>)
 8000182:	2201      	movs	r2, #1
 8000184:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000186:	4933      	ldr	r1, [pc, #204]	; (8000254 <Keypad_Init+0xe4>)
 8000188:	4833      	ldr	r0, [pc, #204]	; (8000258 <Keypad_Init+0xe8>)
 800018a:	f000 fb27 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = R1 ;
 800018e:	4b31      	ldr	r3, [pc, #196]	; (8000254 <Keypad_Init+0xe4>)
 8000190:	2202      	movs	r2, #2
 8000192:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <Keypad_Init+0xe4>)
 8000196:	2204      	movs	r2, #4
 8000198:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800019a:	4b2e      	ldr	r3, [pc, #184]	; (8000254 <Keypad_Init+0xe4>)
 800019c:	2201      	movs	r2, #1
 800019e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001a0:	492c      	ldr	r1, [pc, #176]	; (8000254 <Keypad_Init+0xe4>)
 80001a2:	482d      	ldr	r0, [pc, #180]	; (8000258 <Keypad_Init+0xe8>)
 80001a4:	f000 fb1a 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = R2 ;
 80001a8:	4b2a      	ldr	r3, [pc, #168]	; (8000254 <Keypad_Init+0xe4>)
 80001aa:	2208      	movs	r2, #8
 80001ac:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80001ae:	4b29      	ldr	r3, [pc, #164]	; (8000254 <Keypad_Init+0xe4>)
 80001b0:	2204      	movs	r2, #4
 80001b2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80001b4:	4b27      	ldr	r3, [pc, #156]	; (8000254 <Keypad_Init+0xe4>)
 80001b6:	2201      	movs	r2, #1
 80001b8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001ba:	4926      	ldr	r1, [pc, #152]	; (8000254 <Keypad_Init+0xe4>)
 80001bc:	4826      	ldr	r0, [pc, #152]	; (8000258 <Keypad_Init+0xe8>)
 80001be:	f000 fb0d 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = R3 ;
 80001c2:	4b24      	ldr	r3, [pc, #144]	; (8000254 <Keypad_Init+0xe4>)
 80001c4:	2210      	movs	r2, #16
 80001c6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80001c8:	4b22      	ldr	r3, [pc, #136]	; (8000254 <Keypad_Init+0xe4>)
 80001ca:	2204      	movs	r2, #4
 80001cc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80001ce:	4b21      	ldr	r3, [pc, #132]	; (8000254 <Keypad_Init+0xe4>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001d4:	491f      	ldr	r1, [pc, #124]	; (8000254 <Keypad_Init+0xe4>)
 80001d6:	4820      	ldr	r0, [pc, #128]	; (8000258 <Keypad_Init+0xe8>)
 80001d8:	f000 fb00 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = C0 ;
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <Keypad_Init+0xe4>)
 80001de:	2220      	movs	r2, #32
 80001e0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80001e2:	4b1c      	ldr	r3, [pc, #112]	; (8000254 <Keypad_Init+0xe4>)
 80001e4:	2204      	movs	r2, #4
 80001e6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80001e8:	4b1a      	ldr	r3, [pc, #104]	; (8000254 <Keypad_Init+0xe4>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001ee:	4919      	ldr	r1, [pc, #100]	; (8000254 <Keypad_Init+0xe4>)
 80001f0:	4819      	ldr	r0, [pc, #100]	; (8000258 <Keypad_Init+0xe8>)
 80001f2:	f000 faf3 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = C1 ;
 80001f6:	4b17      	ldr	r3, [pc, #92]	; (8000254 <Keypad_Init+0xe4>)
 80001f8:	2240      	movs	r2, #64	; 0x40
 80001fa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80001fc:	4b15      	ldr	r3, [pc, #84]	; (8000254 <Keypad_Init+0xe4>)
 80001fe:	2204      	movs	r2, #4
 8000200:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000202:	4b14      	ldr	r3, [pc, #80]	; (8000254 <Keypad_Init+0xe4>)
 8000204:	2201      	movs	r2, #1
 8000206:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000208:	4912      	ldr	r1, [pc, #72]	; (8000254 <Keypad_Init+0xe4>)
 800020a:	4813      	ldr	r0, [pc, #76]	; (8000258 <Keypad_Init+0xe8>)
 800020c:	f000 fae6 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = C2 ;
 8000210:	4b10      	ldr	r3, [pc, #64]	; (8000254 <Keypad_Init+0xe4>)
 8000212:	2280      	movs	r2, #128	; 0x80
 8000214:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <Keypad_Init+0xe4>)
 8000218:	2204      	movs	r2, #4
 800021a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800021c:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <Keypad_Init+0xe4>)
 800021e:	2201      	movs	r2, #1
 8000220:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000222:	490c      	ldr	r1, [pc, #48]	; (8000254 <Keypad_Init+0xe4>)
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <Keypad_Init+0xe8>)
 8000226:	f000 fad9 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = C3 ;
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <Keypad_Init+0xe4>)
 800022c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000230:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <Keypad_Init+0xe4>)
 8000234:	2204      	movs	r2, #4
 8000236:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <Keypad_Init+0xe4>)
 800023a:	2201      	movs	r2, #1
 800023c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800023e:	4905      	ldr	r1, [pc, #20]	; (8000254 <Keypad_Init+0xe4>)
 8000240:	4805      	ldr	r0, [pc, #20]	; (8000258 <Keypad_Init+0xe8>)
 8000242:	f000 facb 	bl	80007dc <MCAL_GPIO_Init>

	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000246:	21ff      	movs	r1, #255	; 0xff
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <Keypad_Init+0xe8>)
 800024a:	f000 fb74 	bl	8000936 <MCAL_GPIO_WritePort>

}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	2000003c 	.word	0x2000003c
 8000258:	40010c00 	.word	0x40010c00

0800025c <Keypad_getkey>:
char Keypad_getkey()
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0

	int i,j;
	for(i=0 ; i<4 ; i++)
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	e0b4      	b.n	80003d2 <Keypad_getkey+0x176>
	{
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 8000268:	4b5e      	ldr	r3, [pc, #376]	; (80003e4 <Keypad_getkey+0x188>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	b29b      	uxth	r3, r3
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	485d      	ldr	r0, [pc, #372]	; (80003e8 <Keypad_getkey+0x18c>)
 8000274:	f000 fb48 	bl	8000908 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 8000278:	4b5a      	ldr	r3, [pc, #360]	; (80003e4 <Keypad_getkey+0x188>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	4859      	ldr	r0, [pc, #356]	; (80003e8 <Keypad_getkey+0x18c>)
 8000284:	f000 fb40 	bl	8000908 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 8000288:	4b56      	ldr	r3, [pc, #344]	; (80003e4 <Keypad_getkey+0x188>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	b29b      	uxth	r3, r3
 800028e:	2201      	movs	r2, #1
 8000290:	4619      	mov	r1, r3
 8000292:	4855      	ldr	r0, [pc, #340]	; (80003e8 <Keypad_getkey+0x18c>)
 8000294:	f000 fb38 	bl	8000908 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 8000298:	4b52      	ldr	r3, [pc, #328]	; (80003e4 <Keypad_getkey+0x188>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	b29b      	uxth	r3, r3
 800029e:	2201      	movs	r2, #1
 80002a0:	4619      	mov	r1, r3
 80002a2:	4851      	ldr	r0, [pc, #324]	; (80003e8 <Keypad_getkey+0x18c>)
 80002a4:	f000 fb30 	bl	8000908 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 80002a8:	4a4e      	ldr	r2, [pc, #312]	; (80003e4 <Keypad_getkey+0x188>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	484c      	ldr	r0, [pc, #304]	; (80003e8 <Keypad_getkey+0x18c>)
 80002b8:	f000 fb26 	bl	8000908 <MCAL_GPIO_WritePin>

		for(j=0 ; j<4 ; j++)
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	e080      	b.n	80003c4 <Keypad_getkey+0x168>
		{

			if(MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0)
 80002c2:	4a4a      	ldr	r2, [pc, #296]	; (80003ec <Keypad_getkey+0x190>)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	4846      	ldr	r0, [pc, #280]	; (80003e8 <Keypad_getkey+0x18c>)
 80002d0:	f000 fb03 	bl	80008da <MCAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d171      	bne.n	80003be <Keypad_getkey+0x162>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j])==0)
 80002da:	bf00      	nop
 80002dc:	4a43      	ldr	r2, [pc, #268]	; (80003ec <Keypad_getkey+0x190>)
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	4619      	mov	r1, r3
 80002e8:	483f      	ldr	r0, [pc, #252]	; (80003e8 <Keypad_getkey+0x18c>)
 80002ea:	f000 faf6 	bl	80008da <MCAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f3      	beq.n	80002dc <Keypad_getkey+0x80>
					;
				switch (i) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d861      	bhi.n	80003be <Keypad_getkey+0x162>
 80002fa:	a201      	add	r2, pc, #4	; (adr r2, 8000300 <Keypad_getkey+0xa4>)
 80002fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000300:	08000311 	.word	0x08000311
 8000304:	08000339 	.word	0x08000339
 8000308:	08000361 	.word	0x08000361
 800030c:	08000389 	.word	0x08000389
				case (0):
					if (j == 0)
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d101      	bne.n	800031a <Keypad_getkey+0xbe>
						return '7';
 8000316:	2337      	movs	r3, #55	; 0x37
 8000318:	e060      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 1)
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d101      	bne.n	8000324 <Keypad_getkey+0xc8>
						return '4';
 8000320:	2334      	movs	r3, #52	; 0x34
 8000322:	e05b      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 2)
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d101      	bne.n	800032e <Keypad_getkey+0xd2>
						return '1';
 800032a:	2331      	movs	r3, #49	; 0x31
 800032c:	e056      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 3)
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d13d      	bne.n	80003b0 <Keypad_getkey+0x154>
						return '?';
 8000334:	233f      	movs	r3, #63	; 0x3f
 8000336:	e051      	b.n	80003dc <Keypad_getkey+0x180>
					break;
				case (1):
					if (j == 0)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d101      	bne.n	8000342 <Keypad_getkey+0xe6>
						return '8';
 800033e:	2338      	movs	r3, #56	; 0x38
 8000340:	e04c      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 1)
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d101      	bne.n	800034c <Keypad_getkey+0xf0>
						return '5';
 8000348:	2335      	movs	r3, #53	; 0x35
 800034a:	e047      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 2)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d101      	bne.n	8000356 <Keypad_getkey+0xfa>
						return '2';
 8000352:	2332      	movs	r3, #50	; 0x32
 8000354:	e042      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 3)
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	2b03      	cmp	r3, #3
 800035a:	d12b      	bne.n	80003b4 <Keypad_getkey+0x158>
						return '0';
 800035c:	2330      	movs	r3, #48	; 0x30
 800035e:	e03d      	b.n	80003dc <Keypad_getkey+0x180>
					break;
				case (2):
					if (j == 0)
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <Keypad_getkey+0x10e>
						return '9';
 8000366:	2339      	movs	r3, #57	; 0x39
 8000368:	e038      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 1)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d101      	bne.n	8000374 <Keypad_getkey+0x118>
						return '6';
 8000370:	2336      	movs	r3, #54	; 0x36
 8000372:	e033      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 2)
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	2b02      	cmp	r3, #2
 8000378:	d101      	bne.n	800037e <Keypad_getkey+0x122>
						return '3';
 800037a:	2333      	movs	r3, #51	; 0x33
 800037c:	e02e      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 3)
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d119      	bne.n	80003b8 <Keypad_getkey+0x15c>
						return '=';
 8000384:	233d      	movs	r3, #61	; 0x3d
 8000386:	e029      	b.n	80003dc <Keypad_getkey+0x180>
					break;
				case (3):
					if (j == 0)
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <Keypad_getkey+0x136>
						return '/';
 800038e:	232f      	movs	r3, #47	; 0x2f
 8000390:	e024      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 1)
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d101      	bne.n	800039c <Keypad_getkey+0x140>
						return '*';
 8000398:	232a      	movs	r3, #42	; 0x2a
 800039a:	e01f      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 2)
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d101      	bne.n	80003a6 <Keypad_getkey+0x14a>
						return '-';
 80003a2:	232d      	movs	r3, #45	; 0x2d
 80003a4:	e01a      	b.n	80003dc <Keypad_getkey+0x180>
					else if (j == 3)
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d107      	bne.n	80003bc <Keypad_getkey+0x160>
						return '+';
 80003ac:	232b      	movs	r3, #43	; 0x2b
 80003ae:	e015      	b.n	80003dc <Keypad_getkey+0x180>
					break;
 80003b0:	bf00      	nop
 80003b2:	e004      	b.n	80003be <Keypad_getkey+0x162>
					break;
 80003b4:	bf00      	nop
 80003b6:	e002      	b.n	80003be <Keypad_getkey+0x162>
					break;
 80003b8:	bf00      	nop
 80003ba:	e000      	b.n	80003be <Keypad_getkey+0x162>
					break;
 80003bc:	bf00      	nop
		for(j=0 ; j<4 ; j++)
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	f77f af7b 	ble.w	80002c2 <Keypad_getkey+0x66>
	for(i=0 ; i<4 ; i++)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3301      	adds	r3, #1
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	f77f af47 	ble.w	8000268 <Keypad_getkey+0xc>
				}

			}
		}
	}
	return 'A';
 80003da:	2341      	movs	r3, #65	; 0x41

}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000010 	.word	0x20000010
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	20000000 	.word	0x20000000

080003f0 <ms_wait>:
 *      Author: Ziad El-Sayed
 */
#include "LCD.h"

void ms_wait(int x)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	unsigned i,j;
	for(i=0 ; i<x ;i++)
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	e00b      	b.n	8000416 <ms_wait+0x26>
		for(j=0 ; j<255 ;j++);
 80003fe:	2300      	movs	r3, #0
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	e002      	b.n	800040a <ms_wait+0x1a>
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	3301      	adds	r3, #1
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	2bfe      	cmp	r3, #254	; 0xfe
 800040e:	d9f9      	bls.n	8000404 <ms_wait+0x14>
	for(i=0 ; i<x ;i++)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3301      	adds	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	429a      	cmp	r2, r3
 800041c:	d3ef      	bcc.n	80003fe <ms_wait+0xe>

}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <LCD_GPIO_Init>:
void LCD_GPIO_Init()
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

	//EN_SWITCH , RS_SWITCH and RW_SWITCH Output
	PinCfg.GPIO_pinNumber = EN_SWITCH ;
 800042c:	4b52      	ldr	r3, [pc, #328]	; (8000578 <LCD_GPIO_Init+0x150>)
 800042e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000432:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000434:	4b50      	ldr	r3, [pc, #320]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000436:	2204      	movs	r2, #4
 8000438:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800043a:	4b4f      	ldr	r3, [pc, #316]	; (8000578 <LCD_GPIO_Init+0x150>)
 800043c:	2201      	movs	r2, #1
 800043e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000440:	494d      	ldr	r1, [pc, #308]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000442:	484e      	ldr	r0, [pc, #312]	; (800057c <LCD_GPIO_Init+0x154>)
 8000444:	f000 f9ca 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = RS_SWITCH ;
 8000448:	4b4b      	ldr	r3, [pc, #300]	; (8000578 <LCD_GPIO_Init+0x150>)
 800044a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800044e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000450:	4b49      	ldr	r3, [pc, #292]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000452:	2204      	movs	r2, #4
 8000454:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000456:	4b48      	ldr	r3, [pc, #288]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000458:	2201      	movs	r2, #1
 800045a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800045c:	4946      	ldr	r1, [pc, #280]	; (8000578 <LCD_GPIO_Init+0x150>)
 800045e:	4847      	ldr	r0, [pc, #284]	; (800057c <LCD_GPIO_Init+0x154>)
 8000460:	f000 f9bc 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = RW_SWITCH ;
 8000464:	4b44      	ldr	r3, [pc, #272]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800046a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800046c:	4b42      	ldr	r3, [pc, #264]	; (8000578 <LCD_GPIO_Init+0x150>)
 800046e:	2204      	movs	r2, #4
 8000470:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000472:	4b41      	ldr	r3, [pc, #260]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000474:	2201      	movs	r2, #1
 8000476:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000478:	493f      	ldr	r1, [pc, #252]	; (8000578 <LCD_GPIO_Init+0x150>)
 800047a:	4840      	ldr	r0, [pc, #256]	; (800057c <LCD_GPIO_Init+0x154>)
 800047c:	f000 f9ae 	bl	80007dc <MCAL_GPIO_Init>


	//Data Pins are Output push pull wit 10M Speed
	PinCfg.GPIO_pinNumber = GPIO_PIN_0 ;
 8000480:	4b3d      	ldr	r3, [pc, #244]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000482:	2201      	movs	r2, #1
 8000484:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000486:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000488:	2204      	movs	r2, #4
 800048a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800048c:	4b3a      	ldr	r3, [pc, #232]	; (8000578 <LCD_GPIO_Init+0x150>)
 800048e:	2201      	movs	r2, #1
 8000490:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000492:	4939      	ldr	r1, [pc, #228]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000494:	4839      	ldr	r0, [pc, #228]	; (800057c <LCD_GPIO_Init+0x154>)
 8000496:	f000 f9a1 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_1 ;
 800049a:	4b37      	ldr	r3, [pc, #220]	; (8000578 <LCD_GPIO_Init+0x150>)
 800049c:	2202      	movs	r2, #2
 800049e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80004a0:	4b35      	ldr	r3, [pc, #212]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004a2:	2204      	movs	r2, #4
 80004a4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80004ac:	4932      	ldr	r1, [pc, #200]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004ae:	4833      	ldr	r0, [pc, #204]	; (800057c <LCD_GPIO_Init+0x154>)
 80004b0:	f000 f994 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_2 ;
 80004b4:	4b30      	ldr	r3, [pc, #192]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80004ba:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004bc:	2204      	movs	r2, #4
 80004be:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80004c0:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80004c6:	492c      	ldr	r1, [pc, #176]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004c8:	482c      	ldr	r0, [pc, #176]	; (800057c <LCD_GPIO_Init+0x154>)
 80004ca:	f000 f987 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_3 ;
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004d0:	2208      	movs	r2, #8
 80004d2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004dc:	2201      	movs	r2, #1
 80004de:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80004e0:	4925      	ldr	r1, [pc, #148]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004e2:	4826      	ldr	r0, [pc, #152]	; (800057c <LCD_GPIO_Init+0x154>)
 80004e4:	f000 f97a 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_4 ;
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004ea:	2210      	movs	r2, #16
 80004ec:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80004ee:	4b22      	ldr	r3, [pc, #136]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004f0:	2204      	movs	r2, #4
 80004f2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80004fa:	491f      	ldr	r1, [pc, #124]	; (8000578 <LCD_GPIO_Init+0x150>)
 80004fc:	481f      	ldr	r0, [pc, #124]	; (800057c <LCD_GPIO_Init+0x154>)
 80004fe:	f000 f96d 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_5 ;
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000504:	2220      	movs	r2, #32
 8000506:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <LCD_GPIO_Init+0x150>)
 800050a:	2204      	movs	r2, #4
 800050c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000510:	2201      	movs	r2, #1
 8000512:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000514:	4918      	ldr	r1, [pc, #96]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000516:	4819      	ldr	r0, [pc, #100]	; (800057c <LCD_GPIO_Init+0x154>)
 8000518:	f000 f960 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_6 ;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <LCD_GPIO_Init+0x150>)
 800051e:	2240      	movs	r2, #64	; 0x40
 8000520:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000524:	2204      	movs	r2, #4
 8000526:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <LCD_GPIO_Init+0x150>)
 800052a:	2201      	movs	r2, #1
 800052c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800052e:	4912      	ldr	r1, [pc, #72]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <LCD_GPIO_Init+0x154>)
 8000532:	f000 f953 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_7 ;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <LCD_GPIO_Init+0x150>)
 800053e:	2204      	movs	r2, #4
 8000540:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <LCD_GPIO_Init+0x150>)
 8000544:	2201      	movs	r2, #1
 8000546:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000548:	490b      	ldr	r1, [pc, #44]	; (8000578 <LCD_GPIO_Init+0x150>)
 800054a:	480c      	ldr	r0, [pc, #48]	; (800057c <LCD_GPIO_Init+0x154>)
 800054c:	f000 f946 	bl	80007dc <MCAL_GPIO_Init>


	//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000556:	4809      	ldr	r0, [pc, #36]	; (800057c <LCD_GPIO_Init+0x154>)
 8000558:	f000 f9d6 	bl	8000908 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <LCD_GPIO_Init+0x154>)
 8000564:	f000 f9d0 	bl	8000908 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <LCD_GPIO_Init+0x154>)
 8000570:	f000 f9ca 	bl	8000908 <MCAL_GPIO_WritePin>

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000003c 	.word	0x2000003c
 800057c:	40010800 	.word	0x40010800

08000580 <LCD_Init>:

void LCD_Init()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	ms_wait(20);
 8000584:	2014      	movs	r0, #20
 8000586:	f7ff ff33 	bl	80003f0 <ms_wait>
	LCD_GPIO_Init();
 800058a:	f7ff ff4d 	bl	8000428 <LCD_GPIO_Init>
	ms_wait(15);
 800058e:	200f      	movs	r0, #15
 8000590:	f7ff ff2e 	bl	80003f0 <ms_wait>

	LCD_clear_screen();
 8000594:	f000 f894 	bl	80006c0 <LCD_clear_screen>

	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000598:	2038      	movs	r0, #56	; 0x38
 800059a:	f000 f80b 	bl	80005b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800059e:	2006      	movs	r0, #6
 80005a0:	f000 f808 	bl	80005b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80005a4:	2080      	movs	r0, #128	; 0x80
 80005a6:	f000 f805 	bl	80005b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80005aa:	200f      	movs	r0, #15
 80005ac:	f000 f802 	bl	80005b4 <LCD_WRITE_COMMAND>


}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]

	MCAL_GPIO_WritePort(LCD_PORT, command);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <LCD_WRITE_COMMAND+0x40>)
 80005c6:	f000 f9b6 	bl	8000936 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <LCD_WRITE_COMMAND+0x40>)
 80005d2:	f000 f999 	bl	8000908 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <LCD_WRITE_COMMAND+0x40>)
 80005de:	f000 f993 	bl	8000908 <MCAL_GPIO_WritePin>

	ms_wait(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f7ff ff04 	bl	80003f0 <ms_wait>
	LCD_Kick();
 80005e8:	f000 f854 	bl	8000694 <LCD_Kick>

}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40010800 	.word	0x40010800

080005f8 <LCD_WRITE_CHAR>:



void LCD_WRITE_CHAR(unsigned char character)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]

	MCAL_GPIO_WritePort(LCD_PORT, character);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	b29b      	uxth	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <LCD_WRITE_CHAR+0x40>)
 800060a:	f000 f994 	bl	8000936 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <LCD_WRITE_CHAR+0x40>)
 8000616:	f000 f977 	bl	8000908 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <LCD_WRITE_CHAR+0x40>)
 8000622:	f000 f971 	bl	8000908 <MCAL_GPIO_WritePin>

	ms_wait(1);
 8000626:	2001      	movs	r0, #1
 8000628:	f7ff fee2 	bl	80003f0 <ms_wait>
	LCD_Kick();
 800062c:	f000 f832 	bl	8000694 <LCD_Kick>

}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40010800 	.word	0x40010800

0800063c <LCD_WRITE_STRING>:


void LCD_WRITE_STRING(char* string)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000648:	e01c      	b.n	8000684 <LCD_WRITE_STRING+0x48>
		count++;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	607a      	str	r2, [r7, #4]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffcd 	bl	80005f8 <LCD_WRITE_CHAR>
		if (count == 16) {
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	2b10      	cmp	r3, #16
 8000662:	d104      	bne.n	800066e <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000664:	2100      	movs	r1, #0
 8000666:	2002      	movs	r0, #2
 8000668:	f000 f831 	bl	80006ce <LCD_GOTO_XY>
 800066c:	e00a      	b.n	8000684 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2b20      	cmp	r3, #32
 8000672:	d107      	bne.n	8000684 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000674:	f000 f824 	bl	80006c0 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000678:	2100      	movs	r1, #0
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f827 	bl	80006ce <LCD_GOTO_XY>
			count = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1de      	bne.n	800064a <LCD_WRITE_STRING+0xe>
		}
	}


}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <LCD_Kick>:




void LCD_Kick(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <LCD_Kick+0x28>)
 80006a0:	f000 f932 	bl	8000908 <MCAL_GPIO_WritePin>
	ms_wait(50);
 80006a4:	2032      	movs	r0, #50	; 0x32
 80006a6:	f7ff fea3 	bl	80003f0 <ms_wait>
	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <LCD_Kick+0x28>)
 80006b2:	f000 f929 	bl	8000908 <MCAL_GPIO_WritePin>

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010800 	.word	0x40010800

080006c0 <LCD_clear_screen>:




void LCD_clear_screen()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff75 	bl	80005b4 <LCD_WRITE_COMMAND>

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}

080006ce <LCD_GOTO_XY>:



void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4603      	mov	r3, r0
 80006d6:	460a      	mov	r2, r1
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	4613      	mov	r3, r2
 80006dc:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d108      	bne.n	80006f6 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	2b0f      	cmp	r3, #15
 80006e8:	d805      	bhi.n	80006f6 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	3b80      	subs	r3, #128	; 0x80
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff5f 	bl	80005b4 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d108      	bne.n	800070e <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	2b0f      	cmp	r3, #15
 8000700:	d805      	bhi.n	800070e <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	3b40      	subs	r3, #64	; 0x40
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff53 	bl	80005b4 <LCD_WRITE_COMMAND>
		}
	}

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <Get_CRLH_Position>:
 *      Author: Ziad El-Sayed
 */
#include "STM32F103C6_GPIO_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	2b80      	cmp	r3, #128	; 0x80
 8000724:	d042      	beq.n	80007ac <Get_CRLH_Position+0x96>
 8000726:	2b80      	cmp	r3, #128	; 0x80
 8000728:	dc11      	bgt.n	800074e <Get_CRLH_Position+0x38>
 800072a:	2b08      	cmp	r3, #8
 800072c:	d036      	beq.n	800079c <Get_CRLH_Position+0x86>
 800072e:	2b08      	cmp	r3, #8
 8000730:	dc06      	bgt.n	8000740 <Get_CRLH_Position+0x2a>
 8000732:	2b02      	cmp	r3, #2
 8000734:	d02e      	beq.n	8000794 <Get_CRLH_Position+0x7e>
 8000736:	2b04      	cmp	r3, #4
 8000738:	d02e      	beq.n	8000798 <Get_CRLH_Position+0x82>
 800073a:	2b01      	cmp	r3, #1
 800073c:	d028      	beq.n	8000790 <Get_CRLH_Position+0x7a>
 800073e:	e047      	b.n	80007d0 <Get_CRLH_Position+0xba>
 8000740:	2b20      	cmp	r3, #32
 8000742:	d02f      	beq.n	80007a4 <Get_CRLH_Position+0x8e>
 8000744:	2b40      	cmp	r3, #64	; 0x40
 8000746:	d02f      	beq.n	80007a8 <Get_CRLH_Position+0x92>
 8000748:	2b10      	cmp	r3, #16
 800074a:	d029      	beq.n	80007a0 <Get_CRLH_Position+0x8a>
 800074c:	e040      	b.n	80007d0 <Get_CRLH_Position+0xba>
 800074e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000752:	d033      	beq.n	80007bc <Get_CRLH_Position+0xa6>
 8000754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000758:	dc09      	bgt.n	800076e <Get_CRLH_Position+0x58>
 800075a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800075e:	d029      	beq.n	80007b4 <Get_CRLH_Position+0x9e>
 8000760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000764:	d028      	beq.n	80007b8 <Get_CRLH_Position+0xa2>
 8000766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800076a:	d021      	beq.n	80007b0 <Get_CRLH_Position+0x9a>
 800076c:	e030      	b.n	80007d0 <Get_CRLH_Position+0xba>
 800076e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000772:	d027      	beq.n	80007c4 <Get_CRLH_Position+0xae>
 8000774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000778:	dc03      	bgt.n	8000782 <Get_CRLH_Position+0x6c>
 800077a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800077e:	d01f      	beq.n	80007c0 <Get_CRLH_Position+0xaa>
 8000780:	e026      	b.n	80007d0 <Get_CRLH_Position+0xba>
 8000782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000786:	d01f      	beq.n	80007c8 <Get_CRLH_Position+0xb2>
 8000788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800078c:	d01e      	beq.n	80007cc <Get_CRLH_Position+0xb6>
 800078e:	e01f      	b.n	80007d0 <Get_CRLH_Position+0xba>
	{
//CRL
	case GPIO_PIN_0:
		return 0;
 8000790:	2300      	movs	r3, #0
 8000792:	e01e      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000794:	2304      	movs	r3, #4
 8000796:	e01c      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000798:	2308      	movs	r3, #8
 800079a:	e01a      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800079c:	230c      	movs	r3, #12
 800079e:	e018      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80007a0:	2310      	movs	r3, #16
 80007a2:	e016      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80007a4:	2314      	movs	r3, #20
 80007a6:	e014      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 80007a8:	2318      	movs	r3, #24
 80007aa:	e012      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 80007ac:	231c      	movs	r3, #28
 80007ae:	e010      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
//CRH
	case GPIO_PIN_8:
		return 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	e00e      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	e00c      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	e00a      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80007bc:	230c      	movs	r3, #12
 80007be:	e008      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80007c0:	2310      	movs	r3, #16
 80007c2:	e006      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80007c4:	2314      	movs	r3, #20
 80007c6:	e004      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80007c8:	2318      	movs	r3, #24
 80007ca:	e002      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80007cc:	231c      	movs	r3, #28
 80007ce:	e000      	b.n	80007d2 <Get_CRLH_Position+0xbc>
		break;
	}
return 0;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <MCAL_GPIO_Init>:
 * @retval			-None
 * Note				-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 but LQFP48 has only GPIO A,B,PART of C/D exported as external PINS from the MCU.
 */
void MCAL_GPIO_Init (GPIO_t* GPIOx,GPIO_pinConfig_t* pinconfig)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	//Port configure register low (GPIOX_CRL) configures pins 0>>7.
	//Port configure register high (GPIOX_CRH) configures pins 8>>15.
	volatile uint32_t* configregister= NULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
	configregister= (pinconfig->GPIO_pinNumber < GPIO_PIN_8)? &GPIOx->CRL:&GPIOx->CRH ;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	2bff      	cmp	r3, #255	; 0xff
 80007f4:	d801      	bhi.n	80007fa <MCAL_GPIO_Init+0x1e>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	e001      	b.n	80007fe <MCAL_GPIO_Init+0x22>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3304      	adds	r3, #4
 80007fe:	60bb      	str	r3, [r7, #8]
	//clear CNF0[1:0] & MODE0[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(pinconfig->GPIO_pinNumber));
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff86 	bl	8000716 <Get_CRLH_Position>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	230f      	movs	r3, #15
 8000810:	4093      	lsls	r3, r2
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	401a      	ands	r2, r3
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	601a      	str	r2, [r3, #0]
	//if pin is output
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	789b      	ldrb	r3, [r3, #2]
 8000822:	2b07      	cmp	r3, #7
 8000824:	d00b      	beq.n	800083e <MCAL_GPIO_Init+0x62>
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	789b      	ldrb	r3, [r3, #2]
 800082a:	2b06      	cmp	r3, #6
 800082c:	d007      	beq.n	800083e <MCAL_GPIO_Init+0x62>
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	789b      	ldrb	r3, [r3, #2]
 8000832:	2b05      	cmp	r3, #5
 8000834:	d003      	beq.n	800083e <MCAL_GPIO_Init+0x62>
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	789b      	ldrb	r3, [r3, #2]
 800083a:	2b04      	cmp	r3, #4
 800083c:	d10e      	bne.n	800085c <MCAL_GPIO_Init+0x80>
	{
		//Set CNF0[1:0] & MODE0[1:0]
		PIN_Config = ((((pinconfig->GPIO_MODE -4) << 2) | (pinconfig->GPIO_Output_Speed)) & 0x0f);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	789b      	ldrb	r3, [r3, #2]
 8000842:	3b04      	subs	r3, #4
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	b25a      	sxtb	r2, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	78db      	ldrb	r3, [r3, #3]
 800084c:	b25b      	sxtb	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	73fb      	strb	r3, [r7, #15]
 800085a:	e02c      	b.n	80008b6 <MCAL_GPIO_Init+0xda>

	}
	else
	{
		if((pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (pinconfig->GPIO_MODE == GPIO_MODE_Analog))
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	789b      	ldrb	r3, [r3, #2]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d003      	beq.n	800086c <MCAL_GPIO_Init+0x90>
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	789b      	ldrb	r3, [r3, #2]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d107      	bne.n	800087c <MCAL_GPIO_Init+0xa0>
		{
			//Set CNF0[1:0] & MODE0[1:0]00
			PIN_Config = ((((pinconfig->GPIO_MODE) << 2) | 0x0) & 0x0f);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	789b      	ldrb	r3, [r3, #2]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f003 030f 	and.w	r3, r3, #15
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	e01c      	b.n	80008b6 <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)//consider it as input floating
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	789b      	ldrb	r3, [r3, #2]
 8000880:	2b08      	cmp	r3, #8
 8000882:	d102      	bne.n	800088a <MCAL_GPIO_Init+0xae>
		{
			PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0f);
 8000884:	2304      	movs	r3, #4
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e015      	b.n	80008b6 <MCAL_GPIO_Init+0xda>
		}
		else //PU or PD INPUT
		{
			PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0f);
 800088a:	2308      	movs	r3, #8
 800088c:	73fb      	strb	r3, [r7, #15]
			//Table 20. Port bit configuration table pull up PxODR 1
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	789b      	ldrb	r3, [r3, #2]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d107      	bne.n	80008a6 <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table pull up PxODR 1
				GPIOx->ODR |= pinconfig->GPIO_pinNumber;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	8812      	ldrh	r2, [r2, #0]
 800089e:	431a      	orrs	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	e007      	b.n	80008b6 <MCAL_GPIO_Init+0xda>
			}
			else//Table 20. Port bit configuration table pull down PxODR 0
			{
				//Table 20. Port bit configuration table pull down PxODR 0
				GPIOx->ODR &= ~(pinconfig->GPIO_pinNumber);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	8812      	ldrh	r2, [r2, #0]
 80008ae:	43d2      	mvns	r2, r2
 80008b0:	401a      	ands	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60da      	str	r2, [r3, #12]

		}

		}
	//write on CRL or CRH
	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(pinconfig->GPIO_pinNumber));
 80008b6:	7bfc      	ldrb	r4, [r7, #15]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff2a 	bl	8000716 <Get_CRLH_Position>
 80008c2:	4603      	mov	r3, r0
 80008c4:	fa04 f203 	lsl.w	r2, r4, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	431a      	orrs	r2, r3
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	601a      	str	r2, [r3, #0]


}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd90      	pop	{r4, r7, pc}

080008da <MCAL_GPIO_ReadPin>:
* @param [IN]		-PinNumber:Set PinNumber according to @ref GPIO_PINS_define.
* @retval			-The input pin value (two values based on @ref GPIO_PIN_State).
* Note				-None
*/
uint8_t MCAL_GPIO_ReadPin (GPIO_t* GPIOx,uint16_t PinNumber)
{
 80008da:	b480      	push	{r7}
 80008dc:	b085      	sub	sp, #20
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	460b      	mov	r3, r1
 80008e4:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatues;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	887b      	ldrh	r3, [r7, #2]
 80008ec:	4013      	ands	r3, r2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatues = GPIO_PIN_SET ;
 80008f2:	2301      	movs	r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
 80008f6:	e001      	b.n	80008fc <MCAL_GPIO_ReadPin+0x22>
	}
	else{
		bitstatues = GPIO_PIN_RESET ;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
	}
return bitstatues;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <MCAL_GPIO_WritePin>:
* @param [IN]		-value: Pin value.
* @retval			-None.
* Note				-None.
*/
void MCAL_GPIO_WritePin (GPIO_t* GPIOx,uint16_t PinNumber,uint8_t Value)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	807b      	strh	r3, [r7, #2]
 8000914:	4613      	mov	r3, r2
 8000916:	707b      	strb	r3, [r7, #1]

	if(Value != GPIO_PIN_RESET)
 8000918:	787b      	ldrb	r3, [r7, #1]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <MCAL_GPIO_WritePin+0x1e>
		//GPIOx->ODR |= PinNumber ;
		//or
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 800091e:	887a      	ldrh	r2, [r7, #2]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	611a      	str	r2, [r3, #16]
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}

}
 8000924:	e002      	b.n	800092c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000926:	887a      	ldrh	r2, [r7, #2]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	615a      	str	r2, [r3, #20]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <MCAL_GPIO_WritePort>:
* @param [IN]		-value: Port value.
* @retval			-None.
* Note				-None.
*/
void MCAL_GPIO_WritePort (GPIO_t* GPIOx,uint16_t Value)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	460b      	mov	r3, r1
 8000940:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000942:	887a      	ldrh	r2, [r7, #2]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	60da      	str	r2, [r3, #12]

}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
	...

08000954 <clock_init>:
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init()
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	//enable clock for GPIOA
	RCC_GPIOA_Clock_EN();
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <clock_init+0x24>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <clock_init+0x24>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
	//enable clock for GPIOB
	RCC_GPIOB_Clock_EN();
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <clock_init+0x24>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a03      	ldr	r2, [pc, #12]	; (8000978 <clock_init+0x24>)
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	6193      	str	r3, [r2, #24]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000

0800097c <GPIO_int>:
void GPIO_int()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
	GPIO_pinConfig_t PinCfg;
	//PA1 input HighZ
	PinCfg.GPIO_pinNumber = GPIO_PIN_9;
 8000982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000986:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000988:	2304      	movs	r3, #4
 800098a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800098c:	2301      	movs	r3, #1
 800098e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4827      	ldr	r0, [pc, #156]	; (8000a34 <GPIO_int+0xb8>)
 8000996:	f7ff ff21 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_10;
 800099a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009a0:	2304      	movs	r3, #4
 80009a2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009a4:	2301      	movs	r3, #1
 80009a6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4821      	ldr	r0, [pc, #132]	; (8000a34 <GPIO_int+0xb8>)
 80009ae:	f7ff ff15 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_11;
 80009b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009b6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009b8:	2304      	movs	r3, #4
 80009ba:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009bc:	2301      	movs	r3, #1
 80009be:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	481b      	ldr	r0, [pc, #108]	; (8000a34 <GPIO_int+0xb8>)
 80009c6:	f7ff ff09 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_12;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009d0:	2304      	movs	r3, #4
 80009d2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009d4:	2301      	movs	r3, #1
 80009d6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4619      	mov	r1, r3
 80009dc:	4815      	ldr	r0, [pc, #84]	; (8000a34 <GPIO_int+0xb8>)
 80009de:	f7ff fefd 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_13;
 80009e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009e8:	2304      	movs	r3, #4
 80009ea:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009ec:	2301      	movs	r3, #1
 80009ee:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	480f      	ldr	r0, [pc, #60]	; (8000a34 <GPIO_int+0xb8>)
 80009f6:	f7ff fef1 	bl	80007dc <MCAL_GPIO_Init>

	PinCfg.GPIO_pinNumber = GPIO_PIN_14;
 80009fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009fe:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a00:	2304      	movs	r3, #4
 8000a02:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a04:	2301      	movs	r3, #1
 8000a06:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <GPIO_int+0xb8>)
 8000a0e:	f7ff fee5 	bl	80007dc <MCAL_GPIO_Init>


	PinCfg.GPIO_pinNumber = GPIO_PIN_15;
 8000a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a16:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <GPIO_int+0xb8>)
 8000a26:	f7ff fed9 	bl	80007dc <MCAL_GPIO_Init>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40010c00 	.word	0x40010c00

08000a38 <Delay>:
void Delay(int x)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	unsigned i,j;
	for(i=0 ; i<x ;i++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	e00b      	b.n	8000a5e <Delay+0x26>
		for(j=0 ; j<255 ;j++);
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	e002      	b.n	8000a52 <Delay+0x1a>
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	2bfe      	cmp	r3, #254	; 0xfe
 8000a56:	d9f9      	bls.n	8000a4c <Delay+0x14>
	for(i=0 ; i<x ;i++)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3ef      	bcc.n	8000a46 <Delay+0xe>

}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <main>:
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0

	unsigned char key_pressed;
	clock_init();
 8000a76:	f7ff ff6d 	bl	8000954 <clock_init>
	GPIO_int();
 8000a7a:	f7ff ff7f 	bl	800097c <GPIO_int>
	LCD_Init();
 8000a7e:	f7ff fd7f 	bl	8000580 <LCD_Init>
	Keypad_Init();
 8000a82:	f7ff fb75 	bl	8000170 <Keypad_Init>

	LCD_WRITE_STRING("Hello World!");
 8000a86:	482d      	ldr	r0, [pc, #180]	; (8000b3c <main+0xcc>)
 8000a88:	f7ff fdd8 	bl	800063c <LCD_WRITE_STRING>
	Delay(30);
 8000a8c:	201e      	movs	r0, #30
 8000a8e:	f7ff ffd3 	bl	8000a38 <Delay>
	LCD_clear_screen();
 8000a92:	f7ff fe15 	bl	80006c0 <LCD_clear_screen>
	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000a96:	4a2a      	ldr	r2, [pc, #168]	; (8000b40 <main+0xd0>)
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a9e:	c303      	stmia	r3!, {r0, r1}
 8000aa0:	801a      	strh	r2, [r3, #0]
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	0c12      	lsrs	r2, r2, #16
 8000aa6:	701a      	strb	r2, [r3, #0]
	unsigned char DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <main+0xd4>)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aae:	c303      	stmia	r3!, {r0, r1}
 8000ab0:	801a      	strh	r2, [r3, #0]
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	0c12      	lsrs	r2, r2, #16
 8000ab6:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	77fb      	strb	r3, [r7, #31]
 8000abc:	e01b      	b.n	8000af6 <main+0x86>
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 8000abe:	7ffb      	ldrb	r3, [r7, #31]
 8000ac0:	f107 0220 	add.w	r2, r7, #32
 8000ac4:	4413      	add	r3, r2
 8000ac6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fd94 	bl	80005f8 <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, DISPLAY[i] << 9); /* write data on to the LED port */
 8000ad0:	7ffb      	ldrb	r3, [r7, #31]
 8000ad2:	f107 0220 	add.w	r2, r7, #32
 8000ad6:	4413      	add	r3, r2
 8000ad8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	025b      	lsls	r3, r3, #9
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4818      	ldr	r0, [pc, #96]	; (8000b48 <main+0xd8>)
 8000ae6:	f7ff ff26 	bl	8000936 <MCAL_GPIO_WritePort>
		Delay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f7ff ffa4 	bl	8000a38 <Delay>
	for (unsigned char i = 0; i < 11; i++) {
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
 8000af2:	3301      	adds	r3, #1
 8000af4:	77fb      	strb	r3, [r7, #31]
 8000af6:	7ffb      	ldrb	r3, [r7, #31]
 8000af8:	2b0a      	cmp	r3, #10
 8000afa:	d9e0      	bls.n	8000abe <main+0x4e>
		/* wait for 1 second */
	}
	LCD_clear_screen();
 8000afc:	f7ff fde0 	bl	80006c0 <LCD_clear_screen>
	Keypad_Init();
 8000b00:	f7ff fb36 	bl	8000170 <Keypad_Init>
	LCD_WRITE_STRING("Keypad is ready");
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <main+0xdc>)
 8000b06:	f7ff fd99 	bl	800063c <LCD_WRITE_STRING>
	Delay(30);
 8000b0a:	201e      	movs	r0, #30
 8000b0c:	f7ff ff94 	bl	8000a38 <Delay>
	LCD_clear_screen();
 8000b10:	f7ff fdd6 	bl	80006c0 <LCD_clear_screen>
	while(1)
	{

		key_pressed = Keypad_getkey();
 8000b14:	f7ff fba2 	bl	800025c <Keypad_getkey>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed) {
 8000b1c:	7fbb      	ldrb	r3, [r7, #30]
 8000b1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b20:	d002      	beq.n	8000b28 <main+0xb8>
 8000b22:	2b41      	cmp	r3, #65	; 0x41
 8000b24:	d008      	beq.n	8000b38 <main+0xc8>
 8000b26:	e002      	b.n	8000b2e <main+0xbe>
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 8000b28:	f7ff fdca 	bl	80006c0 <LCD_clear_screen>
			break;
 8000b2c:	e005      	b.n	8000b3a <main+0xca>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000b2e:	7fbb      	ldrb	r3, [r7, #30]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fd61 	bl	80005f8 <LCD_WRITE_CHAR>
			break;
 8000b36:	e000      	b.n	8000b3a <main+0xca>
			break;
 8000b38:	bf00      	nop
		key_pressed = Keypad_getkey();
 8000b3a:	e7eb      	b.n	8000b14 <main+0xa4>
 8000b3c:	08000c04 	.word	0x08000c04
 8000b40:	08000c24 	.word	0x08000c24
 8000b44:	08000c30 	.word	0x08000c30
 8000b48:	40010c00 	.word	0x40010c00
 8000b4c:	08000c14 	.word	0x08000c14

08000b50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b52:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b54:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b7e:	f000 f811 	bl	8000ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b82:	f7ff ff75 	bl	8000a70 <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   r0, =_estack
 8000b88:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b94:	08000c44 	.word	0x08000c44
  ldr r2, =_sbss
 8000b98:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b9c:	20000040 	.word	0x20000040

08000ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>
	...

08000ba4 <__libc_init_array>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	2500      	movs	r5, #0
 8000ba8:	4e0c      	ldr	r6, [pc, #48]	; (8000bdc <__libc_init_array+0x38>)
 8000baa:	4c0d      	ldr	r4, [pc, #52]	; (8000be0 <__libc_init_array+0x3c>)
 8000bac:	1ba4      	subs	r4, r4, r6
 8000bae:	10a4      	asrs	r4, r4, #2
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	d109      	bne.n	8000bc8 <__libc_init_array+0x24>
 8000bb4:	f000 f81a 	bl	8000bec <_init>
 8000bb8:	2500      	movs	r5, #0
 8000bba:	4e0a      	ldr	r6, [pc, #40]	; (8000be4 <__libc_init_array+0x40>)
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <__libc_init_array+0x44>)
 8000bbe:	1ba4      	subs	r4, r4, r6
 8000bc0:	10a4      	asrs	r4, r4, #2
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	d105      	bne.n	8000bd2 <__libc_init_array+0x2e>
 8000bc6:	bd70      	pop	{r4, r5, r6, pc}
 8000bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bcc:	4798      	blx	r3
 8000bce:	3501      	adds	r5, #1
 8000bd0:	e7ee      	b.n	8000bb0 <__libc_init_array+0xc>
 8000bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bd6:	4798      	blx	r3
 8000bd8:	3501      	adds	r5, #1
 8000bda:	e7f2      	b.n	8000bc2 <__libc_init_array+0x1e>
 8000bdc:	08000c3c 	.word	0x08000c3c
 8000be0:	08000c3c 	.word	0x08000c3c
 8000be4:	08000c3c 	.word	0x08000c3c
 8000be8:	08000c40 	.word	0x08000c40

08000bec <_init>:
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bee:	bf00      	nop
 8000bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf2:	bc08      	pop	{r3}
 8000bf4:	469e      	mov	lr, r3
 8000bf6:	4770      	bx	lr

08000bf8 <_fini>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	bf00      	nop
 8000bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfe:	bc08      	pop	{r3}
 8000c00:	469e      	mov	lr, r3
 8000c02:	4770      	bx	lr
