/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
typedef volatile unsigned int vuint32_t;

#include <stdint.h>

//RCC enable for GPIO
#define RCC_BASE       0x40021000
#define RCC_APB2ENR   *((volatile uint32_t *) (RCC_BASE + 0x18))
#define RCC_IO 		   (1<<2)

//GPIO
#define PORTA_BASE     0x40010800
#define GPIOA_CRH   *((volatile uint32_t *) (PORTA_BASE + 0x04))
#define GPIOA_ODR   *((volatile uint32_t *) (PORTA_BASE + 0x0c))
#define GPIOA_CRL   *((volatile uint32_t *) (PORTA_BASE + 0x00))
#define GPIOA_IDR   *((volatile uint32_t *) (PORTA_BASE + 0x08))

#define PORTB_BASE 		0x40010c00
#define GPIOB_CRH   *((volatile uint32_t *) (PORTB_BASE + 0x04))
#define GPIOB_ODR   *((volatile uint32_t *) (PORTB_BASE + 0x0c))
#define GPIOB_CRL   *((volatile uint32_t *) (PORTB_BASE + 0x00))
#define GPIOB_IDR   *((volatile uint32_t *) (PORTB_BASE + 0x08))

void clock_init()
{
	//enable clock for GPIOA
	RCC_APB2ENR |= RCC_IO;
	//enable clock for GPIOA
	RCC_APB2ENR |= (1<<3);
}
void GPIO_int()
{
	GPIOA_CRL = 0x0 ;
	GPIOB_CRL = 0x0 ;
	//PA1 input HighZ
	GPIOA_CRL |= (1<<6);

	//PB1 output push pull mode
	GPIOB_CRL &= ~(0b11<<6);
	GPIOB_CRL |= (0b01<<4);

	//PA13 input HighZ
	GPIOA_CRH &= ~(0b11<<20);
	GPIOA_CRH |= (0b01<<22);

	//PB13 output push pull mode
	GPIOB_CRH |= (0b01<<20);
	GPIOB_CRH &= ~(0b11<<22);

}
void Delay(int x)
{
	unsigned i;
	for(i=0 ; i<x ;i++);
}
int main(void)
{
	clock_init();
	GPIO_int();

	while(1)
	{
		//PA1 connected to external PUR

		if(((GPIOA_IDR & (1<<1))>>1)==0) //press
		{
			GPIOB_ODR ^= 1<<1 ;
			while(((GPIOA_IDR & (1<<1))>>1)==0);//single press
		}
		//PA13 connected to external PDR
		if(((GPIOA_IDR & (1<<13))>>13)==1) //press
		{
			GPIOB_ODR ^= 1<<13 ; //multi press

		}

	}

	return 0;

}


